// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: location-pkg-service.proto

package location_pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LocationService_CreateOrUpdateLocation_FullMethodName = "/models.locationService/CreateOrUpdateLocation"
	LocationService_LocationByUUID_FullMethodName         = "/models.locationService/LocationByUUID"
	LocationService_GetAllLocations_FullMethodName        = "/models.locationService/GetAllLocations"
	LocationService_DeleteLocation_FullMethodName         = "/models.locationService/DeleteLocation"
	LocationService_UpdateLocation_FullMethodName         = "/models.locationService/UpdateLocation"
)

// LocationServiceClient is the client API for LocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocationServiceClient interface {
	CreateOrUpdateLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*EmptyLocation, error)
	LocationByUUID(ctx context.Context, in *LocationGetReq, opts ...grpc.CallOption) (*Location, error)
	GetAllLocations(ctx context.Context, in *EmptyLocation, opts ...grpc.CallOption) (*AllLocations, error)
	DeleteLocation(ctx context.Context, in *LocationDeleteReq, opts ...grpc.CallOption) (*EmptyLocation, error)
	UpdateLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*EmptyLocation, error)
}

type locationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationServiceClient(cc grpc.ClientConnInterface) LocationServiceClient {
	return &locationServiceClient{cc}
}

func (c *locationServiceClient) CreateOrUpdateLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*EmptyLocation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyLocation)
	err := c.cc.Invoke(ctx, LocationService_CreateOrUpdateLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) LocationByUUID(ctx context.Context, in *LocationGetReq, opts ...grpc.CallOption) (*Location, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Location)
	err := c.cc.Invoke(ctx, LocationService_LocationByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) GetAllLocations(ctx context.Context, in *EmptyLocation, opts ...grpc.CallOption) (*AllLocations, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllLocations)
	err := c.cc.Invoke(ctx, LocationService_GetAllLocations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) DeleteLocation(ctx context.Context, in *LocationDeleteReq, opts ...grpc.CallOption) (*EmptyLocation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyLocation)
	err := c.cc.Invoke(ctx, LocationService_DeleteLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) UpdateLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*EmptyLocation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyLocation)
	err := c.cc.Invoke(ctx, LocationService_UpdateLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocationServiceServer is the server API for LocationService service.
// All implementations must embed UnimplementedLocationServiceServer
// for forward compatibility.
type LocationServiceServer interface {
	CreateOrUpdateLocation(context.Context, *Location) (*EmptyLocation, error)
	LocationByUUID(context.Context, *LocationGetReq) (*Location, error)
	GetAllLocations(context.Context, *EmptyLocation) (*AllLocations, error)
	DeleteLocation(context.Context, *LocationDeleteReq) (*EmptyLocation, error)
	UpdateLocation(context.Context, *Location) (*EmptyLocation, error)
	mustEmbedUnimplementedLocationServiceServer()
}

// UnimplementedLocationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLocationServiceServer struct{}

func (UnimplementedLocationServiceServer) CreateOrUpdateLocation(context.Context, *Location) (*EmptyLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateLocation not implemented")
}
func (UnimplementedLocationServiceServer) LocationByUUID(context.Context, *LocationGetReq) (*Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocationByUUID not implemented")
}
func (UnimplementedLocationServiceServer) GetAllLocations(context.Context, *EmptyLocation) (*AllLocations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLocations not implemented")
}
func (UnimplementedLocationServiceServer) DeleteLocation(context.Context, *LocationDeleteReq) (*EmptyLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocation not implemented")
}
func (UnimplementedLocationServiceServer) UpdateLocation(context.Context, *Location) (*EmptyLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocation not implemented")
}
func (UnimplementedLocationServiceServer) mustEmbedUnimplementedLocationServiceServer() {}
func (UnimplementedLocationServiceServer) testEmbeddedByValue()                         {}

// UnsafeLocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocationServiceServer will
// result in compilation errors.
type UnsafeLocationServiceServer interface {
	mustEmbedUnimplementedLocationServiceServer()
}

func RegisterLocationServiceServer(s grpc.ServiceRegistrar, srv LocationServiceServer) {
	// If the following call pancis, it indicates UnimplementedLocationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LocationService_ServiceDesc, srv)
}

func _LocationService_CreateOrUpdateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).CreateOrUpdateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_CreateOrUpdateLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).CreateOrUpdateLocation(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_LocationByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).LocationByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_LocationByUUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).LocationByUUID(ctx, req.(*LocationGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_GetAllLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).GetAllLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_GetAllLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).GetAllLocations(ctx, req.(*EmptyLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_DeleteLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).DeleteLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_DeleteLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).DeleteLocation(ctx, req.(*LocationDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_UpdateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).UpdateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_UpdateLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).UpdateLocation(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

// LocationService_ServiceDesc is the grpc.ServiceDesc for LocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "models.locationService",
	HandlerType: (*LocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrUpdateLocation",
			Handler:    _LocationService_CreateOrUpdateLocation_Handler,
		},
		{
			MethodName: "LocationByUUID",
			Handler:    _LocationService_LocationByUUID_Handler,
		},
		{
			MethodName: "GetAllLocations",
			Handler:    _LocationService_GetAllLocations_Handler,
		},
		{
			MethodName: "DeleteLocation",
			Handler:    _LocationService_DeleteLocation_Handler,
		},
		{
			MethodName: "UpdateLocation",
			Handler:    _LocationService_UpdateLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "location-pkg-service.proto",
}
